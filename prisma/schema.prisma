// Prisma schema for DogAtlas

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum PlaceType {
  // Recreation & Exercise
  park_offleash_area
  park_onleash_area
  trail_hiking
  trail_walking
  beach_dog_friendly
  lake_dog_friendly
  
  // Food & Drink
  cafe_dog_friendly
  restaurant_dog_friendly
  brewery_dog_friendly
  
  // Services
  vet_clinic
  vet_emergency
  grooming_salon
  grooming_mobile
  pet_store
  doggy_daycare
  dog_training
  
  // Accommodation
  hotel_pet_friendly
  hostel_pet_friendly
  apartment_pet_friendly
  
  // Activities & Events
  dog_park_event
  dog_training_class
  dog_meetup
  pet_expo
  
  // Specialty
  dog_spa
  pet_photography
  dog_taxi
  pet_cemetery
}

enum Role {
  USER
  EDITOR
  ADMIN
}

model City {
  id        String   @id @default(uuid())
  slug      String   @unique
  name      String
  region    String?
  country   String
  lat       Float
  lng       Float
  bbox      Json?    // GeoJSON bbox
  active    Boolean  @default(true)
  places    Place[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([slug])
}

model Place {
  id                String     @id @default(uuid())
  slug              String     @unique
  name              String
  type              PlaceType
  cityId            String
  city              City       @relation(fields: [cityId], references: [id])
  region            String?
  country           String
  lat               Float
  lng               Float
  shortDescription  String
  fullDescription   String?
  imageUrl          String?
  gallery           Json?      // Array of image URLs
  dogFriendlyLevel  Int?
  amenities         Json?      // Array of amenities
  rules             String?
  websiteUrl        String?
  phone             String?
  email             String?
  priceRange        String?
  openingHours      String?
  rating            Float?
  tags              Json?      // Array of tags
  source            String?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  favorites         Favorite[]
  reviews           Review[]

  @@index([cityId])
  @@index([type])
  @@index([slug])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  passwordHash  String?
  accounts      Account[]
  sessions      Session[]
  favorites     Favorite[]
  reviews       Review[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Favorite {
  id      String @id @default(cuid())
  userId  String
  placeId String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  place   Place  @relation(fields: [placeId], references: [id], onDelete: Cascade)

  @@unique([userId, placeId])
}

model Review {
  id        String   @id @default(uuid())
  place     Place    @relation(fields: [placeId], references: [id])
  placeId   String
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  rating    Int
  body      String?
  tags      Json?    // Array of tag strings
  status    String   @default("published")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([placeId])
  @@index([userId])
}

model IngestJob {
  id                 String   @id @default(uuid())
  filename           String
  status             String   @default("pending") // pending, validating, validated, applying, completed, failed
  totalRows          Int
  validRows          Int      @default(0)
  invalidRows        Int      @default(0)
  validationErrors   Json?    // Array of error objects
  validationWarnings Json?    // Array of warning objects
  validData          Json?    // Array of validated row data
  appliedAt          DateTime?
  appliedBy          String?
  createdBy          String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([status])
  @@index([createdBy])
}
