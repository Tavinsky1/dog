// Prisma schema for DogAtlas
// Adjust field types and relations as needed for your app

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  MOD
  ADMIN
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  reviews   Review[]
  rejectedReviews Review[] @relation("RejectedReviews")
  photos    Photo[]
  submissions Submission[]
}

model Place {
  id            String   @id @default(cuid())
  name          String
  slug          String   @unique
  city          String
  description   String?
  category      String
  googlePlaceId String?  @unique
  osmId         String?  @unique
  externalUrls  Json?

  features   PlaceFeature[]
  hours      PlaceHour[]
  photos     Photo[]
  reviews    Review[]
  activities Activity[]
  submissions Submission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PlaceFeature {
  id      String  @id @default(uuid())
  key     String
  value   String
  place   Place   @relation(fields: [placeId], references: [id])
  placeId String
}

model PlaceHour {
  id      String  @id @default(uuid())
  day     String
  open    String
  close   String
  place   Place   @relation(fields: [placeId], references: [id])
  placeId String
}

model Photo {
  id        String   @id @default(uuid())
  url       String
  width     Int?     // Image width
  height    Int?     // Image height  
  source    String?  // Source of the photo (google_places, user, etc.)
  place     Place    @relation(fields: [placeId], references: [id])
  placeId   String
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  createdAt DateTime @default(now())
}

model Review {
  id              String   @id @default(cuid())
  body            String
  rating          Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Source metadata
  source          String?
  url             String?
  language        String?
  publishedAt     DateTime?
  author          String?
  helpfulCount    Int?     @default(0)

  // Moderation metadata
  rejectedAt      DateTime?
  rejectionReason String?
  rejectedById    String?
  rejectedBy      User?    @relation("RejectedReviews", fields: [rejectedById], references: [id])

  userId          String?
  user            User?    @relation(fields: [userId], references: [id])

  placeId         String
  place           Place    @relation(fields: [placeId], references: [id])
}

model Submission {
  id        String   @id @default(uuid())
  type      String
  payload   Json
  place     Place?   @relation(fields: [placeId], references: [id])
  placeId   String?
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  status    String   @default("pending")
  createdAt DateTime @default(now())
}

model Activity {
  id        String   @id @default(uuid())
  type      String
  attrs     Json
  place     Place    @relation(fields: [placeId], references: [id])
  placeId   String
}

model Sponsor {
  id        String   @id @default(uuid())
  name      String
  url       String?
  createdAt DateTime @default(now())
}

model AnalyticsEvent {
  id          String   @id @default(uuid())
  eventType   String   // page_view, place_view, search, category_click, etc.
  eventData   Json?    // Additional event-specific data
  userId      String?  // Track authenticated users
  sessionId   String   // Track anonymous sessions
  ipAddress   String?
  userAgent   String?
  page        String   // Current page path
  referrer    String?  // Referring page
  city        String?  // City context (berlin, etc.)
  category    String?  // Category context if applicable
  placeId     String?  // Place ID if viewing a place
  searchQuery String?  // Search term if applicable
  deviceType  String?  // mobile, desktop, tablet
  browser     String?  // Chrome, Safari, Firefox, etc.
  country     String?  // User's country
  createdAt   DateTime @default(now())

  @@index([eventType, createdAt])
  @@index([city, createdAt])
  @@index([sessionId])
  @@index([userId])
}

model AnalyticsSession {
  id          String   @id @default(uuid())
  sessionId   String   @unique
  userId      String?
  startedAt   DateTime @default(now())
  lastSeenAt  DateTime @default(now())
  pageViews   Int      @default(0)
  city        String?
  entryPage   String
  exitPage    String?
  duration    Int?     // Session duration in seconds
  deviceType  String?
  browser     String?
  country     String?
  ipAddress   String?
  userAgent   String?
}
