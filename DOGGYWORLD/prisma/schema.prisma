generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "sqlite"
  url = "file:./dev.db"
}

model City {
  id      String  @id @default(uuid())
  slug    String  @unique
  name    String
  region  String?
  country String
  lat     Float
  lng     Float
  bbox    String?
  active  Boolean @default(true)
  places  Place[]
}

model Place {
  id               String   @id @default(uuid())
  slug             String   @unique
  name             String
  type             String
  cityId           String
  city             City     @relation(fields: [cityId], references: [id])
  region           String?
  country          String
  lat              Float
  lng              Float
  shortDescription String
  fullDescription  String?
  imageUrl         String?
  gallery          String   @default("[]")
  dogFriendlyLevel Int?
  amenities        String   @default("[]")
  rules            String?
  websiteUrl       String?
  phone            String?
  email            String?
  priceRange       String?
  openingHours     String?
  rating           Float?
  tags             String   @default("[]")
  source           String?
  favorites        Favorite[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  @@index([cityId])
  @@index([type])
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  role          String   @default("user")
  passwordHash  String?
  accounts      Account[]
  sessions      Session[]
  favorites     Favorite[]
}

model Favorite {
  id      String @id @default(cuid())
  userId  String
  placeId String
  user    User   @relation(fields: [userId], references: [id])
  place   Place  @relation(fields: [placeId], references: [id])
  @@unique([userId, placeId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}